parameters:
  id:
    name: id
    in: path
    description: Resource id
    required: true
    schema:
      $ref: "#/definitions/id"
  page:
    name: page
    in: query
    style: deepObject
    explode: true
    allowReserved: true
    description: Allows navigating through paginated resources by specifying the
      desired page number and/or the desired page size. For example, the query
      `page[number]=2&page[size]=5` requests the second page of an endpoint
      providing 5 resources per request (page of size 5). Requests may only
      query for size or number, in which case the other value is set in the
      server using its default values.
    schema:
      $ref: "#/definitions/page"
  fields:
    name: fields
    in: query
    style: deepObject
    explode: true
    allowReserved: true
    description: Also known as "sparse field-sets", this query allows selecting
      only a subset of attributes and relationships to be displayed in the
      resources contained in response message. This reduces the payload of the
      response message that includes all attributes and relationships of every
      resource. Note that field selection is specified on a resource type basis
      (i.e., "agents", "events", and so on).
      <br/><br/>
      Documentation on all resources' attributes and relationships is available
      [here](https://www.alpinebits.org/wp-content/uploads/2020/08/AlpineBits_2020-04.pdf).
    schema:
      $ref: "#/definitions/fields"
  random:
    name: random
    in: query
    description: Sort resources in a random order based on a number seed between
      1 and 50.  Cannot be combined with `random` on a single request.
    schema:
      $ref: "#/definitions/random"
  sort:
    name: sort
    in: query
    description: Sort resources based on primitive attribute. The prefix '-' on
      any attribute path indicates a descending order. Cannot be combined with
      `random` on a single request.
      <br/><br/>
      For example, `sort=-startDate` sort `events` resources on descending order
      of `startDate`.
      <br/><br/>
      At the moment, `startDate` is the only sorting field available.
    schema:
      $ref: "#/definitions/sort"
  search:
    name: search
    in: query
    style: deepObject
    explode: true
    allowReserved: true
    description: Search for resources containing the desired substring (case
      ignored) on the selected text attribute.
    schema:
      $ref: "#/definitions/search"
definitions:
  id:
    type: string
    minLength: 1
  random:
    type: integer
    enum: [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50]
  sort:
    type: string
    enum:
      - startDate
      - -startDate
  search:
    type: object
    properties:
      name:
        type: string
        minLength: 1
        example: bozen
  page:
    type: object
    properties:
      number:
        type: integer
        minimum: 1
      size:
        type: integer
        minimum: 1
    example:
      number: 1
      size: 10
  fields:
    type: object
    properties:
      agents:
        $ref: "#/definitions/agentsFields"
      events:
        $ref: "#/definitions/eventsFields"
      eventSeries:
        $ref: "#/definitions/eventSeriesFields"
      lifts:
        $ref: "#/definitions/liftsFields"
      mountainAreas:
        $ref: "#/definitions/mountainAreasFields"
      snowparks:
        $ref: "#/definitions/snowparksFields"
      trails:
        $ref: "#/definitions/trailsFields"
      venues:
        $ref: "#/definitions/venuesFields"
    example:
      agents: name
      events: organizers
  agentsFields:
    type: string
    pattern: "^abstract|description|name|shortName(,(abstract|description|name|shortName))*"
    example: name
  eventsFields:
    type: string
    pattern: "^abstract|description|name|shortName(,(abstract|description|name|shortName))*"
    example: name
  eventSeriesFields:
    type: string
    pattern: "^abstract|description|name|shortName(,(abstract|description|name|shortName))*"
    example: name
  liftsFields:
    type: string
    pattern: "^abstract|description|name|shortName(,(abstract|description|name|shortName))*"
    example: name
  mountainAreasFields:
    type: string
    pattern: "^abstract|description|name|shortName(,(abstract|description|name|shortName))*"
    example: name
  snowparksFields:
    type: string
    pattern: "^abstract|description|name|shortName(,(abstract|description|name|shortName))*"
    example: name
  trailsFields:
    type: string
    pattern: "^abstract|description|name|shortName(,(abstract|description|name|shortName))*"
    example: name
  venuesFields:
    type: string
    pattern: "^abstract|description|name|shortName(,(abstract|description|name|shortName))*"
    example: name